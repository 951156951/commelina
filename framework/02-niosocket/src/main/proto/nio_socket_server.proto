syntax = "proto3";

package netty.nio.socket.protocol;

option java_package = "com.framework.niosocket.proto";
option java_outer_classname = "SocketNettyProtocol";
option java_multiple_files = true;

// socket 请求体
message SocketASK {
    bool isHeartbeat = 1;
    SocketRequest request = 2;
}

message SocketRequest {
    // 接口域
    uint32 apiPathCode = 1;
    // 接口操作码
    uint32 apiOpcode = 2;
    // 接口版本
    string version = 3;
    // 参数列表
    repeated Arg args = 4;
}

// socket 消息
message SocketMessage {
    // 错误码 0 表示成功响应，1表示通知 , 参考 SYSTEM_CODE_CONSTANTS
    SERVER_CODE code = 1;
    SocketResponse response = 2;
}

message SocketResponse {
    // 服务端预定义 消息的域
    uint32 domain = 1;
    // 操作码  code = 0 , opCode 与 请求的 apiMethod 保持一致，code = 1 则会新定义操作码
    uint32 opcode = 2;
    // 业务协议
    BusinessProtocol bp = 3;
    // 消息内容 字节
    bytes msg = 4;
}

// 参数格式
message Arg {
    // 参数类型
    DATA_TYPE dataType = 1;
    // 值内容
    bytes value = 2;
}

// 系统错误码
enum SERVER_CODE {
    // 成功响应
    RESONSE_CODE = 0;
    // 通知
    NOTIFY_CODE = 1;
    // 心态消息
    HEARTBEAT_CODE = 2;
    // 协议解析错误
    PROTOCOL_FORMAT_ERROR = 3;
    // 要调用的 api 不存在
    RPC_API_NOT_FOUND = 4;
    // 服务端内部错误
    SERVER_ERROR = 5;
}

// 基本数据类型
enum DATA_TYPE {
    INT = 0;
    STRING = 1;
    BOOL = 2;
    LONG = 3;
    DOUBLUE = 4;
    FLOAT = 5;
}

enum BusinessProtocol {
    JSON = 0;
}